// üìÅ routes/auth.js
import express from "express";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import crypto from "crypto";
import nodemailer from "nodemailer";
import multer from "multer";
import { v2 as cloudinary } from "cloudinary";
import fs from "fs";
import User from "../models/User.js";

const router = express.Router();
const SECRET_KEY = process.env.JWT_SECRET || "your_jwt_secret_key";

/* ================================
   üßæ ƒêƒÉng k√Ω (Signup)
================================ */
router.post("/signup", async (req, res) => {
  try {
    const { username, full_name, email, phone, address, password, role } = req.body;

    const existingUser = await User.findOne({
      $or: [{ email }, { username }],
    });
    if (existingUser)
      return res.status(400).json({ message: "Email ho·∫∑c username ƒë√£ t·ªìn t·∫°i!" });

    const hashedPassword = await bcrypt.hash(password, 10);

    const newUser = new User({
      username,
      full_name,
      email,
      phone,
      address,
      password: hashedPassword,
      role: role || "User",
    });

    await newUser.save();

    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!", user: newUser });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
});

/* ================================
   üîê ƒêƒÉng nh·∫≠p (Login)
================================ */
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;

    const user = await User.findOne({ email });
    if (!user)
      return res.status(404).json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid)
      return res.status(401).json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });

    const token = jwt.sign(
      { id: user._id, username: user.username, role: user.role },
      SECRET_KEY,
      { expiresIn: "2h" }
    );

    const { password: _, ...userData } = user.toObject();

    res.status(200).json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
      token,
      user: userData,
    });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
});

/* ================================
   üö™ ƒêƒÉng xu·∫•t (client t·ª± x√≥a token)
================================ */
router.post("/logout", (req, res) => {
  res.status(200).json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng (client x√≥a token)!" });
});

/* ================================
   üîë Qu√™n m·∫≠t kh·∫©u (Forgot Password)
================================ */
router.post("/forgot-password", async (req, res) => {
  try {
    const { email } = req.body;
    const user = await User.findOne({ email });

    if (!user)
      return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng!" });

    const resetToken = crypto.randomBytes(32).toString("hex");
    user.resetToken = resetToken;
    user.tokenExpire = Date.now() + 60 * 60 * 1000; // 1 gi·ªù
    await user.save();

    const resetLink = `http://localhost:3000/reset-password?token=${resetToken}`;

    // C·∫•u h√¨nh g·ª≠i email (d√πng Gmail)
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    await transporter.sendMail({
      from: process.env.EMAIL_USER,
      to: email,
      subject: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u",
      html: `
        <h3>Xin ch√†o ${user.full_name || user.username},</h3>
        <p>B·∫°n v·ª´a y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. H√£y nh·∫•n v√†o li√™n k·∫øt sau ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</p>
        <a href="${resetLink}">${resetLink}</a>
        <p><i>Li√™n k·∫øt c√≥ hi·ªáu l·ª±c trong 1 gi·ªù.</i></p>
      `,
    });

    res.json({ message: "ƒê√£ g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u!" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
});

/* ================================
   üîÑ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u (Reset Password)
================================ */
router.post("/reset-password", async (req, res) => {
  try {
    const { token, password } = req.body;

    const user = await User.findOne({
      resetToken: token,
      tokenExpire: { $gt: Date.now() },
    });

    if (!user)
      return res.status(400).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });

    user.password = await bcrypt.hash(password, 10);
    user.resetToken = null;
    user.tokenExpire = null;
    await user.save();

    res.json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
});

/* ================================
   üñºÔ∏è Upload Avatar (Cloudinary)
================================ */
cloudinary.config({
  cloud_name: process.env.CLOUD_NAME,
  api_key: process.env.CLOUD_KEY,
  api_secret: process.env.CLOUD_SECRET,
});

const upload = multer({ dest: "uploads/" });

router.post("/upload-avatar", upload.single("avatar"), async (req, res) => {
  try {
    const { email } = req.body;
    const user = await User.findOne({ email });
    if (!user)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });

    const uploadResult = await cloudinary.uploader.upload(req.file.path, {
      folder: "avatars",
      public_id: email.split("@")[0],
      overwrite: true,
    });

    fs.unlinkSync(req.file.path); // X√≥a file t·∫°m

    user.avatarUrl = uploadResult.secure_url;
    await user.save();

    res.json({
      message: "C·∫≠p nh·∫≠t avatar th√†nh c√¥ng!",
      avatarUrl: uploadResult.secure_url,
    });
  } catch (error) {
    res.status(500).json({ message: "L·ªói upload avatar!", error: error.message });
  }
});

export default router;
