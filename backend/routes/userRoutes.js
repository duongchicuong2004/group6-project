import express from "express";
import { verifyToken } from "../middleware/authMiddleware.js";
import { checkRole } from "../middleware/checkRole.js";
import { logActivity } from "../middleware/logActivity.js";
import {
  getProfile,
  updateProfile,
  getAllUsers,
  deleteUser,
  createUser,
  updateUserByAdmin,
} from "../controllers/userController.js";

const router = express.Router();

/* ======================================
   üë§ API NG∆Ø·ªúI D√ôNG C√Å NH√ÇN
   (T·∫•t c·∫£ user ƒë√£ ƒëƒÉng nh·∫≠p)
====================================== */

// üìÑ L·∫•y th√¥ng tin c√° nh√¢n
router.get(
  "/profile",
  verifyToken,
  logActivity("Xem h·ªì s∆° c√° nh√¢n"),
  getProfile
);

// ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
router.put(
  "/profile",
  verifyToken,
  logActivity("C·∫≠p nh·∫≠t h·ªì s∆° c√° nh√¢n"),
  updateProfile
);

/* ======================================
   üëë API QU·∫¢N TR·ªä (RBAC n√¢ng cao)
====================================== */

// üßæ L·∫•y danh s√°ch t·∫•t c·∫£ user
// Quy·ªÅn: Admin & Moderator
router.get(
  "/",
  verifyToken,
  checkRole("Admin", "Moderator"),
  logActivity("Xem danh s√°ch ng∆∞·ªùi d√πng"),
  getAllUsers
);

// ‚ûï T·∫°o user m·ªõi
// Quy·ªÅn: ch·ªâ Admin
router.post(
  "/",
  verifyToken,
  checkRole("Admin"),
  logActivity("T·∫°o ng∆∞·ªùi d√πng m·ªõi"),
  createUser
);

// üõ†Ô∏è C·∫≠p nh·∫≠t th√¥ng tin user kh√°c
// Quy·ªÅn: ch·ªâ Admin
router.put(
  "/:id",
  verifyToken,
  checkRole("Admin"),
  logActivity("C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng kh√°c"),
  updateUserByAdmin
);

// üóëÔ∏è X√≥a user
// Quy·ªÅn: ch·ªâ Admin
router.delete(
  "/:id",
  verifyToken,
  checkRole("Admin"),
  logActivity("X√≥a ng∆∞·ªùi d√πng"),
  deleteUser
);

/* ======================================
   ü™µ API LOG HO·∫†T ƒê·ªòNG (Admin xem nh·∫≠t k√Ω)
====================================== */

import Log from "../models/Log.js"; // ‚úÖ Import model Log

router.get(
  "/logs",
  verifyToken,
  checkRole("Admin"),
  logActivity("Xem nh·∫≠t k√Ω h·ªá th·ªëng"),
  async (req, res) => {
    try {
      // ‚úÖ Populate ƒë·ªÉ hi·ªán c·∫£ t√™n ng∆∞·ªùi d√πng thay v√¨ ch·ªâ ID
      const logs = await Log.find()
        .populate("userId", "name email role")
        .sort({ timestamp: -1 });
      res.json(logs);
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y logs:", error);
      res.status(500).json({ message: "L·ªói khi l·∫•y nh·∫≠t k√Ω ho·∫°t ƒë·ªông" });
    }
  }
);

export default router;
