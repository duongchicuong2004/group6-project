import express from "express";
import User from "../models/User.js";
import { getProfile, updateProfile } from "../controllers/userController.js";
import { verifyToken, isAdmin } from "../middleware/authMiddleware.js";

const router = express.Router();

/* ========================================
   üßç‚Äç‚ôÇÔ∏è PROFILE (GET + PUT)
   Ch·ªâ ch√≠nh user m·ªõi ƒë∆∞·ª£c xem ho·∫∑c c·∫≠p nh·∫≠t profile
======================================== */
router.get("/profile/:id", verifyToken, getProfile);
router.put("/profile/:id", verifyToken, updateProfile);

/* ========================================
   üëë ADMIN - QU·∫¢N L√ù USER
   - Xem danh s√°ch t·∫•t c·∫£ user (Admin)
   - X√≥a t√†i kho·∫£n (Admin ho·∫∑c ch√≠nh ch·ªß)
======================================== */

// üßæ L·∫•y danh s√°ch user (ch·ªâ Admin)
router.get("/", verifyToken, isAdmin, async (req, res) => {
  try {
    const users = await User.find().select("-password");
    res.json(users);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch user", error: error.message });
  }
});

// ‚ùå X√≥a user (Admin ho·∫∑c ch√≠nh ch·ªß)
router.delete("/:id", verifyToken, async (req, res) => {
  try {
    const targetUser = await User.findById(req.params.id);
    if (!targetUser) return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i" });

    // üõë Ch·ªâ Admin ho·∫∑c ch√≠nh ch·ªß ƒë∆∞·ª£c x√≥a
    if (req.user.role !== "Admin" && req.user.id !== req.params.id) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a user n√†y!" });
    }

    await User.findByIdAndDelete(req.params.id);
    res.json({ message: "User ƒë√£ b·ªã x√≥a th√†nh c√¥ng!" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi x√≥a user", error: error.message });
  }
});

/* ========================================
   üß© CRUD C∆† B·∫¢N KH√ÅC (n·∫øu c·∫ßn)
   ‚ö†Ô∏è C√≥ th·ªÉ b·ªè qua n·∫øu ch·ªâ d√πng cho Admin
======================================== */
// ‚ûï Th√™m user m·ªõi (Admin c√≥ th·ªÉ th√™m)
router.post("/", verifyToken, isAdmin, async (req, res) => {
  try {
    const newUser = new User(req.body);
    await newUser.save();
    res.status(201).json({ message: "Th√™m user th√†nh c√¥ng", user: newUser });
  } catch (error) {
    res.status(400).json({ message: "L·ªói khi th√™m user", error: error.message });
  }
});

// ‚úèÔ∏è C·∫≠p nh·∫≠t user (Admin ho·∫∑c ch√≠nh ch·ªß)
router.put("/:id", verifyToken, async (req, res) => {
  try {
    if (req.user.role !== "Admin" && req.user.id !== req.params.id) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t user n√†y!" });
    }

    const updatedUser = await User.findByIdAndUpdate(req.params.id, req.body, {
      new: true,
      runValidators: true,
    }).select("-password");

    if (!updatedUser) return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i" });

    res.json({ message: "C·∫≠p nh·∫≠t user th√†nh c√¥ng", user: updatedUser });
  } catch (error) {
    res.status(400).json({ message: "L·ªói khi c·∫≠p nh·∫≠t user", error: error.message });
  }
});

export default router;
