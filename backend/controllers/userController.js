import bcrypt from "bcrypt";
import User from "../models/User.js";

// === GET /users ===
export const getUsers = async (req, res) => {
  try {
    const users = await User.find().select("-password");
    res.json(users);
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

// === POST /users (ƒêƒÉng k√Ω) ===
export const addUser = async (req, res) => {
  try {
    const { name, email, phone, address, password } = req.body;
    if (!name || !email || !password)
      return res.status(400).json({ message: "Thi·∫øu name, email ho·∫∑c password" });

    // üîí M√£ ho√° m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u
    const hashedPassword = await bcrypt.hash(password, 10);

    const newUser = new User({
      name,
      email,
      phone,
      address,
      password: hashedPassword,
    });

    await newUser.save();
    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng", user: newUser });
  } catch (error) {
    res.status(500).json({ message: "Th√™m user th·∫•t b·∫°i", error: error.message });
  }
};

// === POST /login ===
export const loginUser = async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password)
      return res.status(400).json({ message: "Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u" });

    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    // ‚úÖ So s√°nh m·∫≠t kh·∫©u nh·∫≠p v√†o v·ªõi m·∫≠t kh·∫©u m√£ ho√° trong DB
    const validPassword = await bcrypt.compare(password, user.password);
    if (!validPassword)
      return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u!" });

    res.json({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", user });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

// === GET /user/profile/:id ===
export const getProfile = async (req, res) => {
  try {
    const userId = req.params.id;
    const user = await User.findById(userId).select("-password");
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    res.json(user);
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

// === PUT /user/profile/:id ===
export const updateProfile = async (req, res) => {
  try {
    const userId = req.params.id;
    const { name, email, phone, address, password } = req.body;

    // T·∫°o object l∆∞u th√¥ng tin c·∫ßn c·∫≠p nh·∫≠t
    const updateData = { name, email, phone, address };

    // üîí N·∫øu ng∆∞·ªùi d√πng ƒë·ªïi m·∫≠t kh·∫©u ‚Üí m√£ h√≥a l·∫°i
    if (password && password.trim() !== "") {
      const hashedPassword = await bcrypt.hash(password, 10);
      updateData.password = hashedPassword;
    }

    const updated = await User.findByIdAndUpdate(userId, updateData, {
      new: true,
      runValidators: true,
    }).select("-password");

    if (!updated)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", user: updated });
  } catch (error) {
    res.status(500).json({ message: "C·∫≠p nh·∫≠t th·∫•t b·∫°i", error: error.message });
  }
};
